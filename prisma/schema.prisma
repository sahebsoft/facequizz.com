generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  username    String  @id @db.VarChar(20)
  password    String? @db.VarChar(64)
  title       String? @db.VarChar(50)
  email       String? @db.VarChar(50)
  userType    String  @default("u") @map("user_type") @db.VarChar(6)
  divisionId  Int     @default(1) @map("division_id")
  status      Int?
  adSlot      BigInt  @default(6162941872) @map("ad_slot")
  
  quizzes     Quiz[]
  division    Division @relation(fields: [divisionId], references: [id])
  accounts    Account[]
  sessions    Session[]
  
  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [username], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Quiz {
  id          Int       @id @default(autoincrement())
  title       String?   @db.VarChar(200)
  image       String?   @db.VarChar(200)
  username    String?   @db.VarChar(20)
  divisionId  Int       @default(1) @map("division_id")
  quizType    Int       @default(1) @map("quiz_type") @db.SmallInt
  createDate  DateTime  @default(now()) @map("create_date")
  updateDate  DateTime  @default(now()) @updatedAt @map("update_date")
  status      Int       @default(2)
  subTitle    String?   @map("sub_title") @db.Text
  randomFlag  Int?      @default(0) @map("random_flag")
  adsenseFlag Int       @default(0) @map("adsense_flag")
  starFlag    Int       @default(0) @map("star_flag")
  publishDate DateTime? @map("publish_date")
  scoreFlag   Int?      @default(2) @map("score_flag") @db.UnsignedInt
  fbFlag      Int       @default(0) @map("fb_flag")
  visits      Int       @default(0)
  
  user        User?       @relation(fields: [username], references: [username])
  division    Division    @relation(fields: [divisionId], references: [id])
  questions   Question[]
  results     Result[]
  scores      Score[]
  visits_log  Visit[]
  
  @@index([username])
  @@index([visits])
  @@fulltext([subTitle])
  @@fulltext([title])
  @@map("quiz")
}

model Question {
  id          Int      @id @default(autoincrement())
  quizId      Int      @map("quiz_id")
  title       String   @db.Text
  image       String?  @db.Text
  youtubeCode String?  @map("youtube_code") @db.VarChar(20)
  
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     Answer[]
  
  @@index([quizId])
  @@map("question")
}

model Answer {
  id         Int    @id @default(autoincrement())
  quizId     Int    @map("quiz_id")
  questionId Int?   @map("question_id")
  title      String @db.VarChar(255)
  points     Int    @default(0)
  image      String? @db.VarChar(100)
  
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  scores     Score[]
  
  @@index([questionId])
  @@map("answer")
}

model Result {
  id        Int     @id @default(autoincrement())
  quizId    Int     @map("quiz_id")
  title     String  @db.VarChar(200)
  image     String? @db.VarChar(255)
  subTitle  String? @map("sub_title") @db.Text
  pointFrom Int     @default(0) @map("point_from")
  pointTo   Int     @default(0) @map("point_to")
  
  quiz      Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  scores    Score[]
  visits    Visit[]
  
  @@index([quizId])
  @@map("result")
}

model Score {
  id         Int @id @default(autoincrement())
  quizId     Int @map("quiz_id")
  answerId   Int @map("answer_id")
  resultId   Int @map("result_id")
  scoreValue Int @default(0) @map("score_value")
  
  answer     Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  result     Result @relation(fields: [resultId], references: [id], onDelete: Cascade)
  quiz       Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  @@unique([answerId, resultId])
  @@index([resultId])
  @@index([quizId, answerId, resultId])
  @@map("score")
}

model Division {
  id    Int    @id @default(autoincrement())
  title String @db.Text
  
  users User[]
  quizzes Quiz[]
  
  @@map("division")
}

model Contact {
  id       Int      @id @default(autoincrement())
  name     String   @db.Text
  subject  String   @db.Text
  email    String   @db.Text
  message  String   @db.Text
  sendDate DateTime @default(now()) @map("send_date")
  
  @@map("contact")
}

model Visit {
  id        Int      @id @default(autoincrement())
  quizId    Int      @map("quiz_id")
  resultId  Int?     @map("result_id")
  visitType Int      @default(0) @map("visit_type")
  ref       String?  @db.Text
  ip        String?  @db.VarChar(45)
  agent     String?  @db.Text
  visitDate DateTime @default(now()) @map("visit_date")
  
  quiz      Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  result    Result? @relation(fields: [resultId], references: [id], onDelete: Cascade)
  
  @@index([quizId])
  @@index([resultId])
  @@map("visits")
}

model Lookup {
  majorCode String @map("major_code") @db.VarChar(6)
  minorCode String @map("minor_code") @db.VarChar(6)
  title     String @db.VarChar(50)
  
  @@id([majorCode, minorCode])
  @@map("lookup")
}
